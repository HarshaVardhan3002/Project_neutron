/**
 * @fileoverview Feedback page shown after the user completes the baseline assessment.
 * Displays animated charts and a summary of performance in a professional report style.
 */
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import Link from 'next/link';
import { ArrowRight, BrainCircuit, Target, Lightbulb } from 'lucide-react';
import FeedbackCharts from '@/components/lms/feedback-charts';
import { PageHeader } from '@/components/PageHeader.component';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { AnimatedDiv } from '@/components/AnimatedDiv';

/**
 * Mock data for feedback. In a real application, this would be generated by an AI model
 * based on the user's test performance.
 */
const feedbackData = {
    overallBand: 6.5,
    scores: [
        { name: 'Listening', score: 7.0, color: 'hsl(var(--chart-1))' },
        { name: 'Reading', score: 7.5, color: 'hsl(var(--chart-2))' },
        { name: 'Writing', score: 6.0, color: 'hsl(var(--chart-3))' },
        { name: 'Speaking', score: 6.0, color: 'hsl(var(--chart-4))' },
    ],
    strengths: [
        'Good comprehension of main ideas in reading sections.',
        'Clear pronunciation in most speaking tasks.',
    ],
    weaknesses: [
        'Occasional grammatical errors in complex written sentences.',
        'Difficulty with understanding fast-paced, multi-speaker audio.',
    ]
};

/**
 * Renders the feedback page with a professional report layout.
 * It simulates an "AI analysis" phase before showing the results.
 * @returns {JSX.Element} The feedback page component.
 */
export default function FeedbackPage() {
    const [loading, setLoading] = useState(true);

    // Simulate AI analysis delay to make the experience feel more dynamic.
    useEffect(() => {
        const timer = setTimeout(() => {
            setLoading(false);
        }, 2500);
        return () => clearTimeout(timer);
    }, []);

    // Display a loading state while "analyzing" results.
    if (loading) {
        return (
            <div className="flex flex-col min-h-[calc(100vh-10rem)] items-center justify-center text-center p-4">
                <BrainCircuit className="h-16 w-16 text-primary animate-pulse mb-6" />
                <h1 className="font-headline text-3xl font-bold mb-2">Analyzing your results...</h1>
                <p className="text-muted-foreground max-w-md">Our AI is crunching the numbers to create your personalized learning profile. Please wait a moment.</p>
            </div>
        );
    }

    // Display the feedback report after the loading phase.
    return (
        <div className="space-y-8">
            <AnimatedDiv>
                <PageHeader
                    title="Assessment Complete!"
                    description="Here is your personalized performance breakdown and analysis."
                />
            </AnimatedDiv>
            
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-8 items-start">
                <AnimatedDiv className="lg:col-span-2" delay={100}>
                    <FeedbackCharts scores={feedbackData.scores} overallBand={feedbackData.overallBand} />
                </AnimatedDiv>
                
                <div className="lg:col-span-3 space-y-6">
                    <AnimatedDiv delay={200}>
                        <Card className="bg-card/50 backdrop-blur-lg">
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-green-600"><Target className="h-6 w-6" />Identified Strengths</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <ul className="list-disc list-inside space-y-2 text-muted-foreground">
                                    {feedbackData.strengths.map(s => <li key={s}>{s}</li>)}
                                </ul>
                            </CardContent>
                        </Card>
                    </AnimatedDiv>
                    <AnimatedDiv delay={300}>
                        <Card className="bg-card/50 backdrop-blur-lg">
                            <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-yellow-600"><Lightbulb className="h-6 w-6" />Areas for Improvement</CardTitle>
                            </CardHeader>
                            <CardContent>
                                <ul className="list-disc list-inside space-y-2 text-muted-foreground">
                                    {feedbackData.weaknesses.map(w => <li key={w}>{w}</li>)}
                                </ul>
                            </CardContent>
                        </Card>
                    </AnimatedDiv>
                </div>
            </div>

            <AnimatedDiv className="mt-12 text-center" delay={400}>
                <Button size="lg" asChild className="transform transition-transform hover:-translate-y-1">
                    <Link href="/lms/onboarding/plans">
                        View Your Learning Plans <ArrowRight className="ml-2 h-5 w-5" />
                    </Link>
                </Button>
            </AnimatedDiv>
        </div>
    );
}
